//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace controlAdministrativo.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class controlAdministrativoEntities2 : DbContext
    {
        public controlAdministrativoEntities2()
            : base("name=controlAdministrativoEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<auditoria> auditoria { get; set; }
        public virtual DbSet<ausenciasConsecutivo> ausenciasConsecutivo { get; set; }
        public virtual DbSet<boletaAusencias> boletaAusencias { get; set; }
        public virtual DbSet<boletaPermiso> boletaPermiso { get; set; }
        public virtual DbSet<boletaRetiro> boletaRetiro { get; set; }
        public virtual DbSet<canton> canton { get; set; }
        public virtual DbSet<codigoActivacion> codigoActivacion { get; set; }
        public virtual DbSet<departamento> departamento { get; set; }
        public virtual DbSet<distrito> distrito { get; set; }
        public virtual DbSet<estudiantes> estudiantes { get; set; }
        public virtual DbSet<historial> historial { get; set; }
        public virtual DbSet<institucion> institucion { get; set; }
        public virtual DbSet<padres> padres { get; set; }
        public virtual DbSet<permisoComprobante> permisoComprobante { get; set; }
        public virtual DbSet<permisoConsecutivo> permisoConsecutivo { get; set; }
        public virtual DbSet<permisoEstado> permisoEstado { get; set; }
        public virtual DbSet<provincia> provincia { get; set; }
        public virtual DbSet<retiroConsecutivo> retiroConsecutivo { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<terminosCondiciones> terminosCondiciones { get; set; }
        public virtual DbSet<usuarios> usuarios { get; set; }
    
        public virtual int adjuntoBoletaPermiso(Nullable<int> id, byte[] ad)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var adParameter = ad != null ?
                new ObjectParameter("ad", ad) :
                new ObjectParameter("ad", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("adjuntoBoletaPermiso", idParameter, adParameter);
        }
    
        public virtual int AgregarAuditoria(string accion, Nullable<System.DateTime> fecha, string tabla, string modificadoPor, Nullable<int> idUsuarios, Nullable<int> idPadres)
        {
            var accionParameter = accion != null ?
                new ObjectParameter("accion", accion) :
                new ObjectParameter("accion", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var tablaParameter = tabla != null ?
                new ObjectParameter("tabla", tabla) :
                new ObjectParameter("tabla", typeof(string));
    
            var modificadoPorParameter = modificadoPor != null ?
                new ObjectParameter("modificadoPor", modificadoPor) :
                new ObjectParameter("modificadoPor", typeof(string));
    
            var idUsuariosParameter = idUsuarios.HasValue ?
                new ObjectParameter("idUsuarios", idUsuarios) :
                new ObjectParameter("idUsuarios", typeof(int));
    
            var idPadresParameter = idPadres.HasValue ?
                new ObjectParameter("idPadres", idPadres) :
                new ObjectParameter("idPadres", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarAuditoria", accionParameter, fechaParameter, tablaParameter, modificadoPorParameter, idUsuariosParameter, idPadresParameter);
        }
    
        public virtual int AgregarAusenciaConsecutivo(Nullable<int> consecutivo)
        {
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarAusenciaConsecutivo", consecutivoParameter);
        }
    
        public virtual int AgregarBoletaAusencias(Nullable<System.DateTime> fecha, string nombrePadre, string cedulaPadre, string nombreEstudiante, string seccionEstudiante, string justificarAusencias, string razonAusencia, string firma, string recibidoPor, Nullable<int> consecutivo, Nullable<int> idConsecutivo)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var nombrePadreParameter = nombrePadre != null ?
                new ObjectParameter("nombrePadre", nombrePadre) :
                new ObjectParameter("nombrePadre", typeof(string));
    
            var cedulaPadreParameter = cedulaPadre != null ?
                new ObjectParameter("cedulaPadre", cedulaPadre) :
                new ObjectParameter("cedulaPadre", typeof(string));
    
            var nombreEstudianteParameter = nombreEstudiante != null ?
                new ObjectParameter("nombreEstudiante", nombreEstudiante) :
                new ObjectParameter("nombreEstudiante", typeof(string));
    
            var seccionEstudianteParameter = seccionEstudiante != null ?
                new ObjectParameter("seccionEstudiante", seccionEstudiante) :
                new ObjectParameter("seccionEstudiante", typeof(string));
    
            var justificarAusenciasParameter = justificarAusencias != null ?
                new ObjectParameter("justificarAusencias", justificarAusencias) :
                new ObjectParameter("justificarAusencias", typeof(string));
    
            var razonAusenciaParameter = razonAusencia != null ?
                new ObjectParameter("razonAusencia", razonAusencia) :
                new ObjectParameter("razonAusencia", typeof(string));
    
            var firmaParameter = firma != null ?
                new ObjectParameter("firma", firma) :
                new ObjectParameter("firma", typeof(string));
    
            var recibidoPorParameter = recibidoPor != null ?
                new ObjectParameter("recibidoPor", recibidoPor) :
                new ObjectParameter("recibidoPor", typeof(string));
    
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            var idConsecutivoParameter = idConsecutivo.HasValue ?
                new ObjectParameter("idConsecutivo", idConsecutivo) :
                new ObjectParameter("idConsecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarBoletaAusencias", fechaParameter, nombrePadreParameter, cedulaPadreParameter, nombreEstudianteParameter, seccionEstudianteParameter, justificarAusenciasParameter, razonAusenciaParameter, firmaParameter, recibidoPorParameter, consecutivoParameter, idConsecutivoParameter);
        }
    
        public virtual int AgregarBoletaPermmiso(Nullable<System.DateTime> fecha, string departamento, string nombreFuncionario, string cedulaFuncionario, string permisoAusencia, string najoHorario, string permisoRetiro, string justificarAusencia, string justificarLlegadaTardia, byte[] adjunto, string estado, string aprobadoPor, string firmadoPor, Nullable<int> consecutivo, Nullable<int> idConsecutivo)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("departamento", departamento) :
                new ObjectParameter("departamento", typeof(string));
    
            var nombreFuncionarioParameter = nombreFuncionario != null ?
                new ObjectParameter("nombreFuncionario", nombreFuncionario) :
                new ObjectParameter("nombreFuncionario", typeof(string));
    
            var cedulaFuncionarioParameter = cedulaFuncionario != null ?
                new ObjectParameter("cedulaFuncionario", cedulaFuncionario) :
                new ObjectParameter("cedulaFuncionario", typeof(string));
    
            var permisoAusenciaParameter = permisoAusencia != null ?
                new ObjectParameter("permisoAusencia", permisoAusencia) :
                new ObjectParameter("permisoAusencia", typeof(string));
    
            var najoHorarioParameter = najoHorario != null ?
                new ObjectParameter("najoHorario", najoHorario) :
                new ObjectParameter("najoHorario", typeof(string));
    
            var permisoRetiroParameter = permisoRetiro != null ?
                new ObjectParameter("permisoRetiro", permisoRetiro) :
                new ObjectParameter("permisoRetiro", typeof(string));
    
            var justificarAusenciaParameter = justificarAusencia != null ?
                new ObjectParameter("justificarAusencia", justificarAusencia) :
                new ObjectParameter("justificarAusencia", typeof(string));
    
            var justificarLlegadaTardiaParameter = justificarLlegadaTardia != null ?
                new ObjectParameter("justificarLlegadaTardia", justificarLlegadaTardia) :
                new ObjectParameter("justificarLlegadaTardia", typeof(string));
    
            var adjuntoParameter = adjunto != null ?
                new ObjectParameter("adjunto", adjunto) :
                new ObjectParameter("adjunto", typeof(byte[]));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var aprobadoPorParameter = aprobadoPor != null ?
                new ObjectParameter("aprobadoPor", aprobadoPor) :
                new ObjectParameter("aprobadoPor", typeof(string));
    
            var firmadoPorParameter = firmadoPor != null ?
                new ObjectParameter("firmadoPor", firmadoPor) :
                new ObjectParameter("firmadoPor", typeof(string));
    
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            var idConsecutivoParameter = idConsecutivo.HasValue ?
                new ObjectParameter("idConsecutivo", idConsecutivo) :
                new ObjectParameter("idConsecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarBoletaPermmiso", fechaParameter, departamentoParameter, nombreFuncionarioParameter, cedulaFuncionarioParameter, permisoAusenciaParameter, najoHorarioParameter, permisoRetiroParameter, justificarAusenciaParameter, justificarLlegadaTardiaParameter, adjuntoParameter, estadoParameter, aprobadoPorParameter, firmadoPorParameter, consecutivoParameter, idConsecutivoParameter);
        }
    
        public virtual int AgregarCodigoActivacion(string codigo, Nullable<bool> uso)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var usoParameter = uso.HasValue ?
                new ObjectParameter("uso", uso) :
                new ObjectParameter("uso", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarCodigoActivacion", codigoParameter, usoParameter);
        }
    
        public virtual int AgregarDepartamento(string departamento)
        {
            var departamentoParameter = departamento != null ?
                new ObjectParameter("departamento", departamento) :
                new ObjectParameter("departamento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarDepartamento", departamentoParameter);
        }
    
        public virtual int AgregarEstudiantes(string cedula, string nombre, string primerApellido, string segundoApellido, string correo, string telefono, byte[] imagen)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("primerApellido", primerApellido) :
                new ObjectParameter("primerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("segundoApellido", segundoApellido) :
                new ObjectParameter("segundoApellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarEstudiantes", cedulaParameter, nombreParameter, primerApellidoParameter, segundoApellidoParameter, correoParameter, telefonoParameter, imagenParameter);
        }
    
        public virtual int AgregarHistorial(string accion, Nullable<System.DateTime> fecha, Nullable<int> idUsuarios, Nullable<int> idPadres)
        {
            var accionParameter = accion != null ?
                new ObjectParameter("accion", accion) :
                new ObjectParameter("accion", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var idUsuariosParameter = idUsuarios.HasValue ?
                new ObjectParameter("idUsuarios", idUsuarios) :
                new ObjectParameter("idUsuarios", typeof(int));
    
            var idPadresParameter = idPadres.HasValue ?
                new ObjectParameter("idPadres", idPadres) :
                new ObjectParameter("idPadres", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarHistorial", accionParameter, fechaParameter, idUsuariosParameter, idPadresParameter);
        }
    
        public virtual int agregarImagenBoletaAusencias(Nullable<int> id, byte[] img)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarImagenBoletaAusencias", idParameter, imgParameter);
        }
    
        public virtual int agregarImagenBoletaPermiso(Nullable<int> id, byte[] img)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarImagenBoletaPermiso", idParameter, imgParameter);
        }
    
        public virtual int agregarImagenBoletaRetiro(Nullable<int> id, byte[] img)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarImagenBoletaRetiro", idParameter, imgParameter);
        }
    
        public virtual int agregarImagenEstudiante(Nullable<int> id, byte[] img)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarImagenEstudiante", idParameter, imgParameter);
        }
    
        public virtual int agregarImagenInstitucion(Nullable<int> id, byte[] logo, byte[] sello)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var logoParameter = logo != null ?
                new ObjectParameter("logo", logo) :
                new ObjectParameter("logo", typeof(byte[]));
    
            var selloParameter = sello != null ?
                new ObjectParameter("sello", sello) :
                new ObjectParameter("sello", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarImagenInstitucion", idParameter, logoParameter, selloParameter);
        }
    
        public virtual int agregarImagenPadres(Nullable<int> id, byte[] img)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarImagenPadres", idParameter, imgParameter);
        }
    
        public virtual int agregarImagenPermisoComprobante(Nullable<int> id, byte[] img)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarImagenPermisoComprobante", idParameter, imgParameter);
        }
    
        public virtual int agregarImagenUsuarios(Nullable<int> id, byte[] img)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("agregarImagenUsuarios", idParameter, imgParameter);
        }
    
        public virtual int AgregarInstitucion(string nombre, string correo, string direccion, string provincia, string canton, string distrito, string telefono, string notas, string cedula, byte[] logo, byte[] sello, Nullable<int> idTC, Nullable<int> idCA)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var provinciaParameter = provincia != null ?
                new ObjectParameter("provincia", provincia) :
                new ObjectParameter("provincia", typeof(string));
    
            var cantonParameter = canton != null ?
                new ObjectParameter("canton", canton) :
                new ObjectParameter("canton", typeof(string));
    
            var distritoParameter = distrito != null ?
                new ObjectParameter("distrito", distrito) :
                new ObjectParameter("distrito", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("logo", logo) :
                new ObjectParameter("logo", typeof(byte[]));
    
            var selloParameter = sello != null ?
                new ObjectParameter("sello", sello) :
                new ObjectParameter("sello", typeof(byte[]));
    
            var idTCParameter = idTC.HasValue ?
                new ObjectParameter("idTC", idTC) :
                new ObjectParameter("idTC", typeof(int));
    
            var idCAParameter = idCA.HasValue ?
                new ObjectParameter("idCA", idCA) :
                new ObjectParameter("idCA", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarInstitucion", nombreParameter, correoParameter, direccionParameter, provinciaParameter, cantonParameter, distritoParameter, telefonoParameter, notasParameter, cedulaParameter, logoParameter, selloParameter, idTCParameter, idCAParameter);
        }
    
        public virtual int AgregarPadres(string cedula, string nombre, string primerApellido, string segundoApellido, string correo, string contraseña, Nullable<int> pin, string rol, string telefono, string lugarTrabajo, Nullable<bool> habilitado, byte[] imagen, Nullable<int> idInstitucion)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("primerApellido", primerApellido) :
                new ObjectParameter("primerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("segundoApellido", segundoApellido) :
                new ObjectParameter("segundoApellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("contraseña", contraseña) :
                new ObjectParameter("contraseña", typeof(string));
    
            var pinParameter = pin.HasValue ?
                new ObjectParameter("pin", pin) :
                new ObjectParameter("pin", typeof(int));
    
            var rolParameter = rol != null ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var lugarTrabajoParameter = lugarTrabajo != null ?
                new ObjectParameter("lugarTrabajo", lugarTrabajo) :
                new ObjectParameter("lugarTrabajo", typeof(string));
    
            var habilitadoParameter = habilitado.HasValue ?
                new ObjectParameter("habilitado", habilitado) :
                new ObjectParameter("habilitado", typeof(bool));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(byte[]));
    
            var idInstitucionParameter = idInstitucion.HasValue ?
                new ObjectParameter("idInstitucion", idInstitucion) :
                new ObjectParameter("idInstitucion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarPadres", cedulaParameter, nombreParameter, primerApellidoParameter, segundoApellidoParameter, correoParameter, contraseñaParameter, pinParameter, rolParameter, telefonoParameter, lugarTrabajoParameter, habilitadoParameter, imagenParameter, idInstitucionParameter);
        }
    
        public virtual int AgregarPermisoComprobante(Nullable<bool> presentaComprobante, Nullable<bool> multaSalario, string tipoComprobante, string otroComprobante, string aprobadoPor, string firmadoPor, byte[] sello, Nullable<int> idPermiso)
        {
            var presentaComprobanteParameter = presentaComprobante.HasValue ?
                new ObjectParameter("presentaComprobante", presentaComprobante) :
                new ObjectParameter("presentaComprobante", typeof(bool));
    
            var multaSalarioParameter = multaSalario.HasValue ?
                new ObjectParameter("multaSalario", multaSalario) :
                new ObjectParameter("multaSalario", typeof(bool));
    
            var tipoComprobanteParameter = tipoComprobante != null ?
                new ObjectParameter("tipoComprobante", tipoComprobante) :
                new ObjectParameter("tipoComprobante", typeof(string));
    
            var otroComprobanteParameter = otroComprobante != null ?
                new ObjectParameter("OtroComprobante", otroComprobante) :
                new ObjectParameter("OtroComprobante", typeof(string));
    
            var aprobadoPorParameter = aprobadoPor != null ?
                new ObjectParameter("aprobadoPor", aprobadoPor) :
                new ObjectParameter("aprobadoPor", typeof(string));
    
            var firmadoPorParameter = firmadoPor != null ?
                new ObjectParameter("firmadoPor", firmadoPor) :
                new ObjectParameter("firmadoPor", typeof(string));
    
            var selloParameter = sello != null ?
                new ObjectParameter("sello", sello) :
                new ObjectParameter("sello", typeof(byte[]));
    
            var idPermisoParameter = idPermiso.HasValue ?
                new ObjectParameter("idPermiso", idPermiso) :
                new ObjectParameter("idPermiso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarPermisoComprobante", presentaComprobanteParameter, multaSalarioParameter, tipoComprobanteParameter, otroComprobanteParameter, aprobadoPorParameter, firmadoPorParameter, selloParameter, idPermisoParameter);
        }
    
        public virtual int AgregarPermisoConsecutivo(Nullable<int> consecutivo)
        {
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarPermisoConsecutivo", consecutivoParameter);
        }
    
        public virtual int AgregarPermisoEstado(string estado)
        {
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarPermisoEstado", estadoParameter);
        }
    
        public virtual int AgregarRetiro(Nullable<System.DateTime> fecha, string nombrePadre, string cedulaPadre, string nombreEstudiante, string seccionEstudiante, string retiroLecciones, string justificarRetiro, string firma, string recibidoPor, Nullable<int> consecutivo, Nullable<int> idConsecutivo)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var nombrePadreParameter = nombrePadre != null ?
                new ObjectParameter("nombrePadre", nombrePadre) :
                new ObjectParameter("nombrePadre", typeof(string));
    
            var cedulaPadreParameter = cedulaPadre != null ?
                new ObjectParameter("cedulaPadre", cedulaPadre) :
                new ObjectParameter("cedulaPadre", typeof(string));
    
            var nombreEstudianteParameter = nombreEstudiante != null ?
                new ObjectParameter("nombreEstudiante", nombreEstudiante) :
                new ObjectParameter("nombreEstudiante", typeof(string));
    
            var seccionEstudianteParameter = seccionEstudiante != null ?
                new ObjectParameter("seccionEstudiante", seccionEstudiante) :
                new ObjectParameter("seccionEstudiante", typeof(string));
    
            var retiroLeccionesParameter = retiroLecciones != null ?
                new ObjectParameter("retiroLecciones", retiroLecciones) :
                new ObjectParameter("retiroLecciones", typeof(string));
    
            var justificarRetiroParameter = justificarRetiro != null ?
                new ObjectParameter("justificarRetiro", justificarRetiro) :
                new ObjectParameter("justificarRetiro", typeof(string));
    
            var firmaParameter = firma != null ?
                new ObjectParameter("firma", firma) :
                new ObjectParameter("firma", typeof(string));
    
            var recibidoPorParameter = recibidoPor != null ?
                new ObjectParameter("recibidoPor", recibidoPor) :
                new ObjectParameter("recibidoPor", typeof(string));
    
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            var idConsecutivoParameter = idConsecutivo.HasValue ?
                new ObjectParameter("idConsecutivo", idConsecutivo) :
                new ObjectParameter("idConsecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarRetiro", fechaParameter, nombrePadreParameter, cedulaPadreParameter, nombreEstudianteParameter, seccionEstudianteParameter, retiroLeccionesParameter, justificarRetiroParameter, firmaParameter, recibidoPorParameter, consecutivoParameter, idConsecutivoParameter);
        }
    
        public virtual int AgregarRetiroConsecutivo(Nullable<int> consecutivo)
        {
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarRetiroConsecutivo", consecutivoParameter);
        }
    
        public virtual int AgregarTerminosCondiciones(Nullable<bool> aprobado)
        {
            var aprobadoParameter = aprobado.HasValue ?
                new ObjectParameter("aprobado", aprobado) :
                new ObjectParameter("aprobado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarTerminosCondiciones", aprobadoParameter);
        }
    
        public virtual int AgregarUsuarios(string cedula, string nombre, string primerApellido, string segundoApellido, string correo, string contraseña, Nullable<int> pin, string rol, string telefono, string departamento, Nullable<bool> habilitado, byte[] imagen, Nullable<int> idInstitucion)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("primerApellido", primerApellido) :
                new ObjectParameter("primerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("segundoApellido", segundoApellido) :
                new ObjectParameter("segundoApellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("contraseña", contraseña) :
                new ObjectParameter("contraseña", typeof(string));
    
            var pinParameter = pin.HasValue ?
                new ObjectParameter("pin", pin) :
                new ObjectParameter("pin", typeof(int));
    
            var rolParameter = rol != null ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("departamento", departamento) :
                new ObjectParameter("departamento", typeof(string));
    
            var habilitadoParameter = habilitado.HasValue ?
                new ObjectParameter("habilitado", habilitado) :
                new ObjectParameter("habilitado", typeof(bool));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(byte[]));
    
            var idInstitucionParameter = idInstitucion.HasValue ?
                new ObjectParameter("idInstitucion", idInstitucion) :
                new ObjectParameter("idInstitucion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AgregarUsuarios", cedulaParameter, nombreParameter, primerApellidoParameter, segundoApellidoParameter, correoParameter, contraseñaParameter, pinParameter, rolParameter, telefonoParameter, departamentoParameter, habilitadoParameter, imagenParameter, idInstitucionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> BuscarIdPorCedula(Nullable<int> cedula)
        {
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("BuscarIdPorCedula", cedulaParameter);
        }
    
        public virtual ObjectResult<consultarAuditoria_Result> consultarAuditoria(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarAuditoria_Result>("consultarAuditoria", idParameter);
        }
    
        public virtual ObjectResult<consultarAusenciasConsecutivo_Result> consultarAusenciasConsecutivo(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarAusenciasConsecutivo_Result>("consultarAusenciasConsecutivo", idParameter);
        }
    
        public virtual ObjectResult<consultarBoletaAusencias_Result> consultarBoletaAusencias(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarBoletaAusencias_Result>("consultarBoletaAusencias", idParameter);
        }
    
        public virtual ObjectResult<consultarBoletaPermiso_Result> consultarBoletaPermiso(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarBoletaPermiso_Result>("consultarBoletaPermiso", idParameter);
        }
    
        public virtual ObjectResult<consultarBoletaRetiro_Result> consultarBoletaRetiro(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarBoletaRetiro_Result>("consultarBoletaRetiro", idParameter);
        }
    
        public virtual ObjectResult<consultarCanton_Result> consultarCanton(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarCanton_Result>("consultarCanton", idParameter);
        }
    
        public virtual ObjectResult<consultarCodigoActivacion_Result> consultarCodigoActivacion(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarCodigoActivacion_Result>("consultarCodigoActivacion", idParameter);
        }
    
        public virtual ObjectResult<consultarDepartamento_Result> consultarDepartamento(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarDepartamento_Result>("consultarDepartamento", idParameter);
        }
    
        public virtual ObjectResult<consultarDistrito_Result> consultarDistrito(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarDistrito_Result>("consultarDistrito", idParameter);
        }
    
        public virtual ObjectResult<consultarEstudiantes_Result> consultarEstudiantes(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarEstudiantes_Result>("consultarEstudiantes", idParameter);
        }
    
        public virtual ObjectResult<consultarHistorial_Result> consultarHistorial(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarHistorial_Result>("consultarHistorial", idParameter);
        }
    
        public virtual ObjectResult<consultarInstitucion_Result> consultarInstitucion(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarInstitucion_Result>("consultarInstitucion", idParameter);
        }
    
        public virtual ObjectResult<consultarPadres_Result> consultarPadres(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarPadres_Result>("consultarPadres", idParameter);
        }
    
        public virtual ObjectResult<consultarPermisoComprobante_Result> consultarPermisoComprobante(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarPermisoComprobante_Result>("consultarPermisoComprobante", idParameter);
        }
    
        public virtual ObjectResult<consultarPermisoConsecutivo_Result> consultarPermisoConsecutivo(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarPermisoConsecutivo_Result>("consultarPermisoConsecutivo", idParameter);
        }
    
        public virtual ObjectResult<consultarPermisoEstado_Result> consultarPermisoEstado(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarPermisoEstado_Result>("consultarPermisoEstado", idParameter);
        }
    
        public virtual ObjectResult<consultarProvincia_Result> consultarProvincia(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarProvincia_Result>("consultarProvincia", idParameter);
        }
    
        public virtual ObjectResult<consultarRetiroConsecutivo_Result> consultarRetiroConsecutivo(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarRetiroConsecutivo_Result>("consultarRetiroConsecutivo", idParameter);
        }
    
        public virtual ObjectResult<consultarTerminosCondiciones_Result> consultarTerminosCondiciones(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarTerminosCondiciones_Result>("consultarTerminosCondiciones", idParameter);
        }
    
        public virtual ObjectResult<consultarUsuarios_Result> consultarUsuarios(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarUsuarios_Result>("consultarUsuarios", idParameter);
        }
    
        public virtual int deshabilitarPadre(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deshabilitarPadre", iDParameter);
        }
    
        public virtual int deshabilitarUsuario(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deshabilitarUsuario", iDParameter);
        }
    
        public virtual int eliminarBoletaRetiro(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarBoletaRetiro", iDParameter);
        }
    
        public virtual int eliminarBoletasAusencias(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarBoletasAusencias", iDParameter);
        }
    
        public virtual int eliminarBoletasPermiso(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarBoletasPermiso", iDParameter);
        }
    
        public virtual int eliminarDepartamento(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarDepartamento", iDParameter);
        }
    
        public virtual int eliminarEstudiantes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarEstudiantes", iDParameter);
        }
    
        public virtual int eliminarHistorial(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarHistorial", iDParameter);
        }
    
        public virtual int eliminarPadres(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarPadres", iDParameter);
        }
    
        public virtual int eliminarPermisoComprobante(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarPermisoComprobante", iDParameter);
        }
    
        public virtual int eliminarUsuarios(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarUsuarios", iDParameter);
        }
    
        public virtual int habilitarPadres(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("habilitarPadres", iDParameter);
        }
    
        public virtual int habilitarUsuario(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("habilitarUsuario", iDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int updateAuditoria(Nullable<int> id, string accion, Nullable<System.DateTime> fecha, string tabla, string modificadoPor, Nullable<int> idUsuarios, Nullable<int> idPadres)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var accionParameter = accion != null ?
                new ObjectParameter("accion", accion) :
                new ObjectParameter("accion", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var tablaParameter = tabla != null ?
                new ObjectParameter("tabla", tabla) :
                new ObjectParameter("tabla", typeof(string));
    
            var modificadoPorParameter = modificadoPor != null ?
                new ObjectParameter("modificadoPor", modificadoPor) :
                new ObjectParameter("modificadoPor", typeof(string));
    
            var idUsuariosParameter = idUsuarios.HasValue ?
                new ObjectParameter("idUsuarios", idUsuarios) :
                new ObjectParameter("idUsuarios", typeof(int));
    
            var idPadresParameter = idPadres.HasValue ?
                new ObjectParameter("idPadres", idPadres) :
                new ObjectParameter("idPadres", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateAuditoria", idParameter, accionParameter, fechaParameter, tablaParameter, modificadoPorParameter, idUsuariosParameter, idPadresParameter);
        }
    
        public virtual int updateAusenciaConsecutivo(Nullable<int> id, Nullable<int> consecutivo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateAusenciaConsecutivo", idParameter, consecutivoParameter);
        }
    
        public virtual int updateBoletaAusencias(Nullable<int> id, Nullable<System.DateTime> fecha, string nombrePadre, string cedulaPadre, string nombreEstudiante, string seccionEstudiante, string justificarAusencias, string razonAusencia, string firma, string recibidoPor, Nullable<int> consecutivo, Nullable<int> idConsecutivo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var nombrePadreParameter = nombrePadre != null ?
                new ObjectParameter("nombrePadre", nombrePadre) :
                new ObjectParameter("nombrePadre", typeof(string));
    
            var cedulaPadreParameter = cedulaPadre != null ?
                new ObjectParameter("cedulaPadre", cedulaPadre) :
                new ObjectParameter("cedulaPadre", typeof(string));
    
            var nombreEstudianteParameter = nombreEstudiante != null ?
                new ObjectParameter("nombreEstudiante", nombreEstudiante) :
                new ObjectParameter("nombreEstudiante", typeof(string));
    
            var seccionEstudianteParameter = seccionEstudiante != null ?
                new ObjectParameter("seccionEstudiante", seccionEstudiante) :
                new ObjectParameter("seccionEstudiante", typeof(string));
    
            var justificarAusenciasParameter = justificarAusencias != null ?
                new ObjectParameter("justificarAusencias", justificarAusencias) :
                new ObjectParameter("justificarAusencias", typeof(string));
    
            var razonAusenciaParameter = razonAusencia != null ?
                new ObjectParameter("razonAusencia", razonAusencia) :
                new ObjectParameter("razonAusencia", typeof(string));
    
            var firmaParameter = firma != null ?
                new ObjectParameter("firma", firma) :
                new ObjectParameter("firma", typeof(string));
    
            var recibidoPorParameter = recibidoPor != null ?
                new ObjectParameter("recibidoPor", recibidoPor) :
                new ObjectParameter("recibidoPor", typeof(string));
    
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            var idConsecutivoParameter = idConsecutivo.HasValue ?
                new ObjectParameter("idConsecutivo", idConsecutivo) :
                new ObjectParameter("idConsecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateBoletaAusencias", idParameter, fechaParameter, nombrePadreParameter, cedulaPadreParameter, nombreEstudianteParameter, seccionEstudianteParameter, justificarAusenciasParameter, razonAusenciaParameter, firmaParameter, recibidoPorParameter, consecutivoParameter, idConsecutivoParameter);
        }
    
        public virtual int updateBoletaPermmiso(Nullable<int> id, Nullable<System.DateTime> fecha, string departamento, string nombreFuncionario, string cedulaFuncionario, string permisoAusencia, string najoHorario, string permisoRetiro, string justificarAusencia, string justificarLlegadaTardia, byte[] adjunto, string estado, string aprobadoPor, string firmadoPor, Nullable<int> consecutivo, Nullable<int> idConsecutivo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("departamento", departamento) :
                new ObjectParameter("departamento", typeof(string));
    
            var nombreFuncionarioParameter = nombreFuncionario != null ?
                new ObjectParameter("nombreFuncionario", nombreFuncionario) :
                new ObjectParameter("nombreFuncionario", typeof(string));
    
            var cedulaFuncionarioParameter = cedulaFuncionario != null ?
                new ObjectParameter("cedulaFuncionario", cedulaFuncionario) :
                new ObjectParameter("cedulaFuncionario", typeof(string));
    
            var permisoAusenciaParameter = permisoAusencia != null ?
                new ObjectParameter("permisoAusencia", permisoAusencia) :
                new ObjectParameter("permisoAusencia", typeof(string));
    
            var najoHorarioParameter = najoHorario != null ?
                new ObjectParameter("najoHorario", najoHorario) :
                new ObjectParameter("najoHorario", typeof(string));
    
            var permisoRetiroParameter = permisoRetiro != null ?
                new ObjectParameter("permisoRetiro", permisoRetiro) :
                new ObjectParameter("permisoRetiro", typeof(string));
    
            var justificarAusenciaParameter = justificarAusencia != null ?
                new ObjectParameter("justificarAusencia", justificarAusencia) :
                new ObjectParameter("justificarAusencia", typeof(string));
    
            var justificarLlegadaTardiaParameter = justificarLlegadaTardia != null ?
                new ObjectParameter("justificarLlegadaTardia", justificarLlegadaTardia) :
                new ObjectParameter("justificarLlegadaTardia", typeof(string));
    
            var adjuntoParameter = adjunto != null ?
                new ObjectParameter("adjunto", adjunto) :
                new ObjectParameter("adjunto", typeof(byte[]));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var aprobadoPorParameter = aprobadoPor != null ?
                new ObjectParameter("aprobadoPor", aprobadoPor) :
                new ObjectParameter("aprobadoPor", typeof(string));
    
            var firmadoPorParameter = firmadoPor != null ?
                new ObjectParameter("firmadoPor", firmadoPor) :
                new ObjectParameter("firmadoPor", typeof(string));
    
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            var idConsecutivoParameter = idConsecutivo.HasValue ?
                new ObjectParameter("idConsecutivo", idConsecutivo) :
                new ObjectParameter("idConsecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateBoletaPermmiso", idParameter, fechaParameter, departamentoParameter, nombreFuncionarioParameter, cedulaFuncionarioParameter, permisoAusenciaParameter, najoHorarioParameter, permisoRetiroParameter, justificarAusenciaParameter, justificarLlegadaTardiaParameter, adjuntoParameter, estadoParameter, aprobadoPorParameter, firmadoPorParameter, consecutivoParameter, idConsecutivoParameter);
        }
    
        public virtual int updateBoletaRetiro(Nullable<int> id, Nullable<System.DateTime> fecha, string nombrePadre, string cedulaPadre, string nombreEstudiante, string seccionEstudiante, string retiroLecciones, string justificarRetiro, string firma, string recibidoPor, Nullable<int> consecutivo, Nullable<int> idConsecutivo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var nombrePadreParameter = nombrePadre != null ?
                new ObjectParameter("nombrePadre", nombrePadre) :
                new ObjectParameter("nombrePadre", typeof(string));
    
            var cedulaPadreParameter = cedulaPadre != null ?
                new ObjectParameter("cedulaPadre", cedulaPadre) :
                new ObjectParameter("cedulaPadre", typeof(string));
    
            var nombreEstudianteParameter = nombreEstudiante != null ?
                new ObjectParameter("nombreEstudiante", nombreEstudiante) :
                new ObjectParameter("nombreEstudiante", typeof(string));
    
            var seccionEstudianteParameter = seccionEstudiante != null ?
                new ObjectParameter("seccionEstudiante", seccionEstudiante) :
                new ObjectParameter("seccionEstudiante", typeof(string));
    
            var retiroLeccionesParameter = retiroLecciones != null ?
                new ObjectParameter("retiroLecciones", retiroLecciones) :
                new ObjectParameter("retiroLecciones", typeof(string));
    
            var justificarRetiroParameter = justificarRetiro != null ?
                new ObjectParameter("justificarRetiro", justificarRetiro) :
                new ObjectParameter("justificarRetiro", typeof(string));
    
            var firmaParameter = firma != null ?
                new ObjectParameter("firma", firma) :
                new ObjectParameter("firma", typeof(string));
    
            var recibidoPorParameter = recibidoPor != null ?
                new ObjectParameter("recibidoPor", recibidoPor) :
                new ObjectParameter("recibidoPor", typeof(string));
    
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            var idConsecutivoParameter = idConsecutivo.HasValue ?
                new ObjectParameter("idConsecutivo", idConsecutivo) :
                new ObjectParameter("idConsecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateBoletaRetiro", idParameter, fechaParameter, nombrePadreParameter, cedulaPadreParameter, nombreEstudianteParameter, seccionEstudianteParameter, retiroLeccionesParameter, justificarRetiroParameter, firmaParameter, recibidoPorParameter, consecutivoParameter, idConsecutivoParameter);
        }
    
        public virtual int updateCodigoActivacion(Nullable<int> id, string codigo, Nullable<bool> uso)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var usoParameter = uso.HasValue ?
                new ObjectParameter("uso", uso) :
                new ObjectParameter("uso", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateCodigoActivacion", idParameter, codigoParameter, usoParameter);
        }
    
        public virtual int updateDepartamento(Nullable<int> id, string departamento)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("departamento", departamento) :
                new ObjectParameter("departamento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateDepartamento", idParameter, departamentoParameter);
        }
    
        public virtual int updateEstudiantes(Nullable<int> id, string cedula, string nombre, string primerApellido, string segundoApellido, string correo, string telefono, byte[] imagen)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("primerApellido", primerApellido) :
                new ObjectParameter("primerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("segundoApellido", segundoApellido) :
                new ObjectParameter("segundoApellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateEstudiantes", idParameter, cedulaParameter, nombreParameter, primerApellidoParameter, segundoApellidoParameter, correoParameter, telefonoParameter, imagenParameter);
        }
    
        public virtual int updateHistorial(Nullable<int> id, string accion, Nullable<System.DateTime> fecha, Nullable<int> idUsuarios, Nullable<int> idPadres)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var accionParameter = accion != null ?
                new ObjectParameter("accion", accion) :
                new ObjectParameter("accion", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var idUsuariosParameter = idUsuarios.HasValue ?
                new ObjectParameter("idUsuarios", idUsuarios) :
                new ObjectParameter("idUsuarios", typeof(int));
    
            var idPadresParameter = idPadres.HasValue ?
                new ObjectParameter("idPadres", idPadres) :
                new ObjectParameter("idPadres", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateHistorial", idParameter, accionParameter, fechaParameter, idUsuariosParameter, idPadresParameter);
        }
    
        public virtual int updateInstitucion(Nullable<int> id, string nombre, string correo, string direccion, string provincia, string canton, string distrito, string telefono, string notas, string cedula, byte[] logo, byte[] sello, Nullable<int> idTC, Nullable<int> idCA)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var provinciaParameter = provincia != null ?
                new ObjectParameter("provincia", provincia) :
                new ObjectParameter("provincia", typeof(string));
    
            var cantonParameter = canton != null ?
                new ObjectParameter("canton", canton) :
                new ObjectParameter("canton", typeof(string));
    
            var distritoParameter = distrito != null ?
                new ObjectParameter("distrito", distrito) :
                new ObjectParameter("distrito", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var notasParameter = notas != null ?
                new ObjectParameter("notas", notas) :
                new ObjectParameter("notas", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("logo", logo) :
                new ObjectParameter("logo", typeof(byte[]));
    
            var selloParameter = sello != null ?
                new ObjectParameter("sello", sello) :
                new ObjectParameter("sello", typeof(byte[]));
    
            var idTCParameter = idTC.HasValue ?
                new ObjectParameter("idTC", idTC) :
                new ObjectParameter("idTC", typeof(int));
    
            var idCAParameter = idCA.HasValue ?
                new ObjectParameter("idCA", idCA) :
                new ObjectParameter("idCA", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateInstitucion", idParameter, nombreParameter, correoParameter, direccionParameter, provinciaParameter, cantonParameter, distritoParameter, telefonoParameter, notasParameter, cedulaParameter, logoParameter, selloParameter, idTCParameter, idCAParameter);
        }
    
        public virtual int updatePadres(Nullable<int> id, string cedula, string nombre, string primerApellido, string segundoApellido, string correo, string contraseña, Nullable<int> pin, string rol, string telefono, string lugarTrabajo, Nullable<bool> habilitado, byte[] imagen, Nullable<int> idInstitucion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("primerApellido", primerApellido) :
                new ObjectParameter("primerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("segundoApellido", segundoApellido) :
                new ObjectParameter("segundoApellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("contraseña", contraseña) :
                new ObjectParameter("contraseña", typeof(string));
    
            var pinParameter = pin.HasValue ?
                new ObjectParameter("pin", pin) :
                new ObjectParameter("pin", typeof(int));
    
            var rolParameter = rol != null ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var lugarTrabajoParameter = lugarTrabajo != null ?
                new ObjectParameter("lugarTrabajo", lugarTrabajo) :
                new ObjectParameter("lugarTrabajo", typeof(string));
    
            var habilitadoParameter = habilitado.HasValue ?
                new ObjectParameter("habilitado", habilitado) :
                new ObjectParameter("habilitado", typeof(bool));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(byte[]));
    
            var idInstitucionParameter = idInstitucion.HasValue ?
                new ObjectParameter("idInstitucion", idInstitucion) :
                new ObjectParameter("idInstitucion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatePadres", idParameter, cedulaParameter, nombreParameter, primerApellidoParameter, segundoApellidoParameter, correoParameter, contraseñaParameter, pinParameter, rolParameter, telefonoParameter, lugarTrabajoParameter, habilitadoParameter, imagenParameter, idInstitucionParameter);
        }
    
        public virtual int updatePermisoComprobante(Nullable<int> id, Nullable<bool> presentaComprobante, Nullable<bool> multaSalario, string tipoComprobante, string otroComprobante, string aprobadoPor, string firmadoPor, byte[] sello, Nullable<int> idPermiso)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var presentaComprobanteParameter = presentaComprobante.HasValue ?
                new ObjectParameter("presentaComprobante", presentaComprobante) :
                new ObjectParameter("presentaComprobante", typeof(bool));
    
            var multaSalarioParameter = multaSalario.HasValue ?
                new ObjectParameter("multaSalario", multaSalario) :
                new ObjectParameter("multaSalario", typeof(bool));
    
            var tipoComprobanteParameter = tipoComprobante != null ?
                new ObjectParameter("tipoComprobante", tipoComprobante) :
                new ObjectParameter("tipoComprobante", typeof(string));
    
            var otroComprobanteParameter = otroComprobante != null ?
                new ObjectParameter("OtroComprobante", otroComprobante) :
                new ObjectParameter("OtroComprobante", typeof(string));
    
            var aprobadoPorParameter = aprobadoPor != null ?
                new ObjectParameter("aprobadoPor", aprobadoPor) :
                new ObjectParameter("aprobadoPor", typeof(string));
    
            var firmadoPorParameter = firmadoPor != null ?
                new ObjectParameter("firmadoPor", firmadoPor) :
                new ObjectParameter("firmadoPor", typeof(string));
    
            var selloParameter = sello != null ?
                new ObjectParameter("sello", sello) :
                new ObjectParameter("sello", typeof(byte[]));
    
            var idPermisoParameter = idPermiso.HasValue ?
                new ObjectParameter("idPermiso", idPermiso) :
                new ObjectParameter("idPermiso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatePermisoComprobante", idParameter, presentaComprobanteParameter, multaSalarioParameter, tipoComprobanteParameter, otroComprobanteParameter, aprobadoPorParameter, firmadoPorParameter, selloParameter, idPermisoParameter);
        }
    
        public virtual int updatePermisoConsecutivo(Nullable<int> id, Nullable<int> consecutivo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatePermisoConsecutivo", idParameter, consecutivoParameter);
        }
    
        public virtual int updatePermisoEstado(Nullable<int> id, string estado)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatePermisoEstado", idParameter, estadoParameter);
        }
    
        public virtual int updateRetiroConsecutivo(Nullable<int> id, Nullable<int> consecutivo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var consecutivoParameter = consecutivo.HasValue ?
                new ObjectParameter("consecutivo", consecutivo) :
                new ObjectParameter("consecutivo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateRetiroConsecutivo", idParameter, consecutivoParameter);
        }
    
        public virtual int updateTerminosCondiciones(Nullable<int> id, Nullable<bool> aprobado)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var aprobadoParameter = aprobado.HasValue ?
                new ObjectParameter("aprobado", aprobado) :
                new ObjectParameter("aprobado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateTerminosCondiciones", idParameter, aprobadoParameter);
        }
    
        public virtual int updateUsuarios(Nullable<int> id, string cedula, string nombre, string primerApellido, string segundoApellido, string correo, string contraseña, Nullable<int> pin, string rol, string telefono, string departamento, Nullable<bool> habilitado, byte[] imagen, Nullable<int> idInstitucion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("primerApellido", primerApellido) :
                new ObjectParameter("primerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("segundoApellido", segundoApellido) :
                new ObjectParameter("segundoApellido", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("contraseña", contraseña) :
                new ObjectParameter("contraseña", typeof(string));
    
            var pinParameter = pin.HasValue ?
                new ObjectParameter("pin", pin) :
                new ObjectParameter("pin", typeof(int));
    
            var rolParameter = rol != null ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("departamento", departamento) :
                new ObjectParameter("departamento", typeof(string));
    
            var habilitadoParameter = habilitado.HasValue ?
                new ObjectParameter("habilitado", habilitado) :
                new ObjectParameter("habilitado", typeof(bool));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("imagen", imagen) :
                new ObjectParameter("imagen", typeof(byte[]));
    
            var idInstitucionParameter = idInstitucion.HasValue ?
                new ObjectParameter("idInstitucion", idInstitucion) :
                new ObjectParameter("idInstitucion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateUsuarios", idParameter, cedulaParameter, nombreParameter, primerApellidoParameter, segundoApellidoParameter, correoParameter, contraseñaParameter, pinParameter, rolParameter, telefonoParameter, departamentoParameter, habilitadoParameter, imagenParameter, idInstitucionParameter);
        }
    }
}
